{% extends "base.peb" %}

{% block content %}
    <div class="dashboard">
        <section class="overview-section">
            {% include "components/stat-cards.peb" %}
        </section>
        
        <section class="projects-section">
            {% include "components/project-overview.peb" %}
            
            <div class="overall-progress">
                <div class="section-header">
                    <h2>Overall Progress</h2>
                    <div class="filter-dropdown">
                        <span>All</span>
                        <i class="fa-solid fa-chevron-down"></i>
                    </div>
                </div>
                
                <div class="progress-chart">
                    <div class="progress-meter">
                        <div class="progress-gauge">
                            <div class="gauge-value" data-value="{{ stats.completionPercentage }}"></div>
                            <div class="gauge-center">
                                <div class="gauge-percentage">{{ stats.completionPercentage }}%</div>
                                <div class="gauge-label">Completed</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="project-stats">
                        <div class="stat-item total">
                            <div class="stat-number">{{ stats.projectCount }}</div>
                            <div class="stat-label">Total projects</div>
                        </div>
                        <div class="stat-item completed">
                            <div class="stat-number">{{ stats.completedProjects }}</div>
                            <div class="stat-label">Completed</div>
                        </div>
                        <div class="stat-item delayed">
                            <div class="stat-number">{{ stats.delayedProjects }}</div>
                            <div class="stat-label">Delayed</div>
                        </div>
                        <div class="stat-item ongoing">
                            <div class="stat-number">{{ stats.ongoingProjects }}</div>
                            <div class="stat-label">On going</div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        
        <section class="tasks-workload-section">
            <div class="today-tasks">
                <div class="section-header">
                    <h2>Today task</h2>
                </div>
                
                <div class="tasks-tabs">
                    <div class="tab active">All <span class="tab-count">10</span></div>
                    <div class="tab">Important</div>
                    <div class="tab">Notes <span class="tab-count">5</span></div>
                    <div class="tab">Links <span class="tab-count">10</span></div>
                </div>
                
                <div class="tasks-list">
                    {% for task in tasks %}
                        <div class="task-item {% if task.isCompleted %}completed{% endif %}">
                            <div class="task-checkbox">
                                {% if task.isCompleted %}
                                    <i class="fa-solid fa-check-circle"></i>
                                {% else %}
                                    <i class="fa-regular fa-circle"></i>
                                {% endif %}
                            </div>
                            <div class="task-content">
                                <div class="task-description">{{ task.description }}</div>
                                <div class="task-status">
                                    <span class="task-badge task-{{ task.status | lower }}">
                                        {{ task.status }}
                                    </span>
                                </div>
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
            
            <div class="projects-workload">
                <div class="section-header">
                    <h2>Projects Workload</h2>
                    <div class="filter-dropdown">
                        <span>Last 3 months</span>
                        <i class="fa-solid fa-chevron-down"></i>
                    </div>
                </div>
                
                <div class="workload-chart">
                    {% for member in teamMembers %}
                        <div class="team-member">
                            <div class="member-name">{{ member.name }}</div>
                            <div class="task-stacks">

                        </div>
                    {% endfor %}
                </div>
            </div>
        </section>
    </div>
{% endblock %}

{% block scripts %}
    <script>
        // Initialize circular progress charts
        document.querySelectorAll('.progress-circle').forEach(circle => {
            const progress = parseInt(circle.dataset.progress);
            const circumference = 2 * Math.PI * 18; // Circle radius = 18px
            const offset = circumference - (progress / 100) * circumference;
            
            // Create the SVG elements
            circle.innerHTML = `
                <svg class="circle-progress" width="40" height="40" viewBox="0 0 40 40">
                    <circle cx="20" cy="20" r="18" fill="none" stroke="#e6e6e6" stroke-width="4"></circle>
                    <circle class="progress-value" cx="20" cy="20" r="18" fill="none" stroke="${getProgressColor(progress)}" 
                            stroke-width="4" stroke-dasharray="${circumference}" 
                            stroke-dashoffset="${offset}" transform="rotate(-90 20 20)"></circle>
                </svg>
                <span class="progress-text" style="color: ${getProgressColor(progress)}">${progress}%</span>
            `;
        });
        
        // Initialize gauge chart
        const gaugeElement = document.querySelector('.gauge-value');
        if (gaugeElement) {
            const value = parseInt(gaugeElement.dataset.value);
            const angle = (value / 100) * 180;
            gaugeElement.style.transform = `rotate(${angle}deg)`;
        }
        
        // Helper function to get color based on progress
        function getProgressColor(progress) {
            if (progress >= 90) return '#4CAF50'; // Green
            if (progress >= 50) return '#FF9800'; // Orange
            return '#F44336'; // Red
        }
    </script>
{% endblock %}